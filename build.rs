use std::{error::Error, fmt::Write, fs};

use wgsl_to_wgpu::{MatrixVectorTypes, WriteOptions, create_shader_module};

const WGSL_FILE: &str = "src/shader.wgsl";

fn main() -> Result<(), Box<dyn Error>> {
    println!("cargo:rerun-if-changed={WGSL_FILE}");

    let wgsl_source = fs::read_to_string(WGSL_FILE)?;

    // Generate the Rust bindings and write to a file.
    let mut text = String::new();
    writeln!(&mut text, "// File automatically generated by build.rs.")?;
    writeln!(&mut text, "// Changes made to this file will not be saved.")?;

    text += &create_shader_module(&wgsl_source, "shader.wgsl", WriteOptions {
        derive_encase_host_shareable: true,
        matrix_vector_types: MatrixVectorTypes::Rust,
        rustfmt: true,
        validate: Some(Default::default()),
        ..Default::default()
    })
    .inspect_err(|error| error.emit_to_stderr_with_path(&wgsl_source, WGSL_FILE))
    .map_err(|_| "Failed to validate shader")?;

    std::fs::write("src/shader.rs", text.as_bytes())?;

    Ok(())
}
